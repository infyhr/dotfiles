imap <S-Tab> <C-o><<
imap <S-Tab> <Esc><<i
set nocompatible
""source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

" Config by Infy :D
" Allow backspace to do anything? I don't get this
set backspace=indent,eol,start

" Let's see everything vim's doing! -> BAD IDEA.
"set verbose=9

" Do the indentation automatically
set autoindent
    " 4 spaces for TABs
set shiftwidth=4
set tabstop=4
    " Dunno?
set smarttab
set smartindent

" Spaces, not TABs
set expandtab

" Use mouse to select shit around, very useful.
""set selectmode=mouse

" vim, no vi. VIM.
""set nocompatible

" ??????? ???? ?? ?
set cmdheight=2

" Don't keep backups
set nobackup
set nowritebackup

" Numbers on the left hand side.
set number

" Show the cursor position all the time!
set ruler

" Show (partial) commands
set showcmd

" do incremental searches (annoying but handy);
set incsearch

" Show  tab characters. Visual Whitespace.
"set list
"set listchars=tab:>.
"set listchars=tab:»·,trail:·

" Set ignorecase on
set ignorecase

" smart search (override 'ic' when pattern has uppers)
set scs

" can haz shiny
syntax on
filetype plugin indent on

" +++ Make it obvious which mode we are in
set laststatus=2 " always show status line
"set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]
" set statusline=%F%m%r%h%w\ [%{&ff}]\ [%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}
set statusline=%F%m%r%h%w\ [%l/%L]\ %<[%{&ff}]\ %h%m%r%=%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\ \"}%k\ %-14.(%l,%c%V%)\ %P\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}



highlight Comment ctermfg=black
highlight StatusLine ctermfg=black ctermbg=white

" no wrapping plz...mrzin to sranje
set nowrap

"set insertmode

" mappings
" inoremap <C-l> <C-o>
" inoremap <C-o> <C-o>:w
" inoremap <C-c> <C-o>:q!
" inoremap <C-x> <C-o>:q<CR>
" inoremap <C-w> <C-o>/
" inoremap <C-k> <C-o>dd
" inoremap <C-u> <C-o>P

" EXIT
map <C-X> <Esc>:wq<CR>
imap <C-X> <Esc>:wq<CR>
map <C-X><C-X> <Esc>:q!<CR>
imap <C-X><C-X> <Esc>:q!<CR>

" BACKSPACE DELETES 4 SPACES
set softtabstop=4

" CODING MAPPINGSSSSSSSSSSSSSSSS
" inoremap ( ()<Esc>i
" inoremap () () <Right><Esc>i
" inoremap {<CR> {<CR>}<Left><CR><Up><Tab><Esc>A
" inoremap [ []<Esc>i
" inoremap [] []<Right><Esc>i
" inoremap ' ''<Esc>i
" inoremap '' ''<Right><Esc>i
" inoremap " ""<Esc>i
"inoremap "" ""<Right><Esc>i

" TABS AND SHIT IN GVIM YO
map  <C-Left> <Esc>:tabp<CR><Esc>i
imap  <C-Left> <Esc>:tabp<CR><Esc>i
map  <C-Right> <Esc>:tabn<CR><Esc>i
imap  <C-Right> <Esc>:tabn<CR><Esc>i
imap  <C-t> <Esc>:tabnew<CR><Esc>i
imap  <C-w> <Esc>:tabclose<CR><Esc>i

"Get that K reboundddddd
map <C-K> <Esc>dd
imap <C-K> <Esc>dd<Esc>i

"Color must be slate.
color slate

" Maximize on startup
set lines=30 columns=140

set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

"Use TAB in mswin to indent and unindent lines.
vnoremap <Tab> >

" Enable Snipmate
filetype plugin on

" Configure NERDTree to do F3..."
cd D:\www\htdocs
autocmd VimEnter * nmap <F3> :NERDTreeToggle<CR>
autocmd VimEnter * imap <F3> <Esc>:NERDTreeToggle<CR>a
let NERDTreeQuitOnOpen=1
let NERDTreeWinSize=35

" PLUGINS YOU USE AND YOU PUT THEM IN vimfiles:"
"" Snipmate
"" TComment
"" MRU
"" ctrlp
"" Nerdtree F3 thing look up
"" Matchit

"Make ctags work (taglist plugin)"
filetype on

"taglist plugin on toggle F2.
autocmd VimEnter * nmap <F2> :TlistToggle<CR>
autocmd VimEnter * imap <F2> <Esc>:TlistToggle<CR>a

"Window navigation..ALT + arrow keys > * ;)
nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

"Window MOVEMENT...let's try this out, shall we ;)
nmap <silent> <A-S-Up> <C-W>K
nmap <silent> <A-S-Down> <C-W>J
nmap <silent> <A-S-Left> <C-W>H
nmap <silent> <A-S-Right> <C-W>L
nmap <silent> <A-S-T> <C-W>T

"Map f11 and f12 to resize windows effectively."
map <silent> <F11> <C-W>>
nmap <silent> <F12> <C-W><
if bufwinnr(1)
  map <kPlus> <C-W>+
  map <kMinus> <C-W>-
endif


" Switch tabs 123456789"
map <C-1> 1gt
imap <C-1> <C-O>1gt

map <C-2> 2gt
imap <C-2> <C-O>2gt

map <C-3> 3gt
imap <C-3> <C-O>3gt

map <C-4> 4gt
imap <C-4> <C-O>4gt

map <C-5> 5gt
imap <C-5> <C-O>5gt

map <C-6> 6gt
imap <C-6> <C-O>6gt

map <C-7> 7gt
imap <C-7> <C-O>7gt

map <C-8> 8gt
imap <C-8> <C-O>8gt

map <C-9> 9gt
imap <C-9> <C-O>9gt

map <C-0> 10gt
imap <C-0> <C-O>10gt

" Always show the tab bar"
set showtabline=2

" Display tab numbers...
set showtabline=2 " always show tabs in gvim, but not vim
" set up tab labels with tab number, buffer name, number of windows
function! GuiTabLabel()
  let label = ''
  let bufnrlist = tabpagebuflist(v:lnum)
  " Add '+' if one of the buffers in the tab page is modified
  for bufnr in bufnrlist
    if getbufvar(bufnr, "&modified")
      let label = '+'
      break
    endif
  endfor
  " Append the tab number
  let label .= v:lnum.': '
  " Append the buffer name
  let name = bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
  if name == ''
    " give a name to no-name documents
    if &buftype=='quickfix'
      let name = '[Quickfix List]'
    else
      let name = '[No Name]'
    endif
  else
    " get only the file name
    let name = fnamemodify(name,":t")
  endif
  let label .= name
  " Append the number of windows in the tab page
  let wincount = tabpagewinnr(v:lnum, '$')
  return label . '  [W: ' . wincount . ']'
endfunction
set guitablabel=%{GuiTabLabel()}


" Remove UTF8 BOM and save as UTF8...
set nobomb
set fileencoding=utf-8
set fileencoding=utf8

"Finally fixed this.."
set encoding=utf-8

" PHP Documentation...
filetype plugin on
au FileType php set keywordprg=:help

" Alias :Tabmerge to :merge and :tm"
cnoreabbrev <expr> merge ((getcmdtype() is# ':' && getcmdline() is# 'merge')?('Tabmerge'):('merge'))
cnoreabbrev <expr> tm ((getcmdtype() is# ':' && getcmdline() is# 'tm')?('Tabmerge'):('tm'))

" Fullscreen hook"
"map <F11> <Esc>:call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>

" Cursor..fixes some bugs."
set guicursor=a:block-Cursor
set guicursor+=i:blinkon0

" Set mousemode to nothing to be able to select and TAB. behave mswin sets
" this to default mouse,key
set selectmode=

" Smart HOME - Kad se pritisne HOME botun krene na poиetak prvog znaka a ne
" poиetka linije
noremap <expr> <silent> <Home> col('.') == match(getline('.'),'\S')+1 ? '0' : '^'
imap <silent> <Home> <C-O><Home>

" Shift tab
"imap <S-Tab> <C-o><<
"imap <S-Tab> <Esc><<i
imap <S-Tab> <C-d>

" Get rid of unneeded gvim stuff ;)
":set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar

set nobk " No backup!

" Test 123 tilda?
map ё :
map ~~ :

let delimitMate_expand_cr = 1

nnoremap <F9> :set list!<CR>

" ******** KRAJ ********
" HERE WE GO! (default to insert mode)
"start
"^ bad idea

" Move tabs left and right ;)
function TabLeft()
   let tab_number = tabpagenr() - 1
   if tab_number == 0
      execute "tabm" tabpagenr('$') - 1
   else
      execute "tabm" tab_number - 1
   endif
endfunction

function TabRight()
   let tab_number = tabpagenr() - 1
   let last_tab_number = tabpagenr('$') - 1
   if tab_number == last_tab_number
      execute "tabm" 0
   else
      execute "tabm" tab_number + 1
   endif
endfunction

map <silent><C-S-Right> :execute TabRight()<CR>
map <silent><C-S-Left> :execute TabLeft()<CR>

" Fuck autocomments
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=oi

" Dropdown autocomplete hack for supertab, enter chooses the suggestions
set completeopt=longest,menuone

" BREAKS DELIMIT MATE <CR>
"""""inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>" """"

imap <expr> <CR> pumvisible() ? "\<c-y>" : "<Plug>delimitMateCR"

"inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
"  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  " \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" Colors of dropdown.
hi Pmenu guibg=#CCCCCC guifg=#000000

" Bind SHIFT+T to move the window to a new tab
nmap <S-T> :tabedit %<CR>

" Bind CTRL+E to :close!
nmap <C-E> :close!<CR>

" Courier new please
set guifont=Courier_New:h10

" Fuck this annoying shit.
set noswapfile

" PHP-doc plugin
imap <C-p> <ESC>:call PhpDoc()<CR>i 

" Change the dir to current buffer.
autocmd BufEnter * lcd %:p:h

set ff=unix

" Namjesti da F1 mijenya izmedu insert mode i normal mode. Doesn't work under
" w32
" nmap <F1>i
" imap <F1><Esc>

" Stavi da se mijeya boja status bara...
" now set it up to change the status line based on mode
if version >= 700
  au InsertEnter * hi StatusLine term=reverse ctermbg=5 gui=bold guisp=Red
  au InsertLeave * hi StatusLine term=reverse ctermfg=0 ctermbg=2 gui=bold,reverse
endif

" Cursor highlight - Disabled because of flickering under w32.
"set cursorline
"highlight CursorLine gui=none guibg=grey10

" Everything we (y)ank is accessible between multiple tabs.
set clipboard=unnamedplus " LINUX
set clipboard=unnamed " WINDOWS
